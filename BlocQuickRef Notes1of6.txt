Notes from Bloc Foundation Recap
I'm rereading the entire bloc foundation course with the goal of converting it into a series of algorithms for accomplishing specific tasks in Objective-C. This should help with learning swift later- i can convert it much more easily into other languages in general, though it'll be of questionable usage if i do so as much of it is built into the Apple platform.

So. Starting off. Notes for every page.

1 
# Bloc Structure. how much time, apprenticeship, roadmap, appointments, syllabus page1
2 Syllabus p2- 
-screenhero, 
-google hangouts/skype, and 
-xcode are all that's necessary. 
I think i should get maybe a smaller computer even less capable of other things. +1return Distraction. If so, a mac mini probably, in some place without internet. +1return
Code reviews and Pull Requests are critical. A code review is a systematic examination of computer source code, intended to find and fix mistakes overlooked in the initial development phase.
Pull Requests are done through github. Pull requests ask others to review the set of changes suggested in the pull request, discuss potential modification, and push follow-up commits if necessary. +1return 

Review Pull Request process with Steve, formally set up projects in Github for multipeer project as fork from other 'example of functioning multipeer' project.

Bloc Overflow- went there and took a look. Seems pretty good. My approach is too wildly different for it though. Trying to answer other peoples' questions might be a good exercise. +1ret

messages for comm with tutor, community via bloc hacker club. Hacker club teams 
3 syllabus p3
-use basecamp to organize projects.
assignment based on mentor expectations and apprentice expectations. 
Mentor expectationsYour mentor will lead your apprenticeship and may adjust the course to accommodate your learning curve Your mentor will be on time for meetings and meetings will last approximately 30 minutesYour mentor will respond promptly to issues that are blocking your progressYour mentor will review and complete submitted checkpoints and assignments in a timely fashionYour mentor will conduct regular code reviewsApprentice expectationsYou will trust the knowledge and experience of your mentor and accept the assignments and projects provided by your mentor You will be self-driven, motivated to learn, and able to commit at least 15/25/40 hours a week to working on the course based on your trackYou will attend meetings on time and be available for at least 30 minutes to work with your mentorYou will focus on how well you understand the information and not just whether or not your answer is "correct"You will keep your mentor informed when you get stuck, letting them know what the problem is and how you've sought to resolve it

—contacted Steve at 1200 aug 16 2015 about this project, feeling stuck, needing to re-understand the information to make new correct answers. 

Initialized Github repo on github.com, put files for these notes into folder. Broke notes into the 6 section notes1of6 format. Ran the following code in the folder to achieve this:

cd [into folder, in this case BlocQuickRef in XcodeProj in Desktop]
git init
git add .
git commit -m 'Initial Commit- added bloc foundation pdf files and blocquickref notes 1of6 file in progress'

[note, had to go through all of frickin' bloc again to find how to sync with a github account using their setup. Github's suggestions are useless too.

git remote add origin https://github.com/pscheyer/BlocQuickRef.git
git push origin master

Takes a bit. the .pdfs are pretty big.

Saved this file and ran

git add .
git commit -m 'addl notes on process of initializing git and commits.'

Moving on. p4
4 - cut
5 - 
# install and get to know Xcode
Xcode includes the IDE, 
LLVM compiler which turns code you write into an app
Instruments for mreasuring and tuning your app's performance
iOS simulator for running your app on your computer
the latest OSX and iOS SDKs, which make it simpler to write native apps for these platforms. Followed link to SDK- a set of software dev tools allowing creation of apps for specific platforms.

Recommends we sign up for the developer program allowing testing, debugging, directly on iOS devices.
Gives access to unreleased betas of iOS and XCode
grants access to pple dev forums, where you can ask questions of apple engineers and other knowledgeable people.
lets you distribute apps on the app store.

Starts with configuring XCode.

p6 update XCode preferences. 
Add your account if you signed up for dev
A graphic on how the preferences should be updated. 

Header Taking XCode for a spin
Select create a new xcode project from the welcome to xcode menu. Or, press file -> new -> project.

7 Graphic and Algorithm for this application:
1. Select Application under iOS in the menu on the left2. SelectMaster-DetailApplication3. PressNext4. Enter"hello"in the Product Name text field5. Enter your name in the Organization Name text field. For example:JohnAppleseed6. Enter com.<youruserhandle>in the Company Identifier text field. Forexample:com.john‐appleseed7. Select Objective-C as your language8. Leave the remaining options as they are and press Next9. Select a folder to save your Xcode project in, and press Create (Tip: you may want to create a new folder called "XcodeProjects" to keep everything organized on your computer).

Next it describes the 5 main areas of the XCode menu. 

SectionLocationPurposeToolbarAt the top, with the play / pause buttonsEasy access to common functionsNavigatorLeft columnEditorCenter columnFind stuff in your project, like files, compiler warnings, and unit testsUtilitiesRight columnEdit code, user interface files, and build settingsDebug AreaBelow the editor (hidden by default)Miscellaneous tools to make your life easierSee logs and observe what happens while your app runs

p8 has a graphic displaying the portions of the XCode window.
Some great shortcuts.

⌘0 (command zero)⌥⌘0 (option, command, zero) 
⇧⌘Y (shift, command, "Y")

XCode has 8 navigators which can be accessed quickly using ⌘1 - ⌘8. There is a graphic displaying where on the GUI to find these things.

⌘1 - Project Navigator
9 Allows you to add, delete, group, and rearrange files in your XCode project. Click a file here to open it in the editory. Notably, file groupings here are not linked to folder structure in the hard drive. Move files around and they'll stay put on your hard drive.

⌘2 - Symbol Navigator
Navigate your project's class hierarchy. This is useful for finding a specific method or class if you can't remember which file it's in.

This navigator is uncommon, as ⇧⌘O (shift, command, the letter "O") will usually find things quicker.

⌘3 - Find Navigator
Find and replace any string within your project.

⌘4 - Issue Navigator
Here XCode displays warnings, errors, and other issues found when opening, analyzing, and building your project. Warnings are in yellow and can be ignored. Errors are in red and must be resolved.

⌘5 - Test Navigator
Navigate through and run your app's unit tests.

⌘6 - Debug Navigator
While app is running, see the app's threads and associated stack information. This is what the app is doing while it runs, allowing you to compare this to what you're expecting. You do this when something isn't working correctly.

⌘7 Breakpoint Navigator
Breakpoints are used in debugging, they pause your app when it reaches a certain line of code or condition so you can inspect what's happening.

⌘8 - Log Navigator
Various tasks generate log files, such as building the app and continuous integration. These logs are displayed here. 

10 - Assignment for this section, Install and Get to Know XCode.
1. Use the ⇧⌘O keyboard shortcut to find the viewDidLoad method in the DetailViewController class.(This is referred to as [DetailViewController ‐viewDidLoad].)2. Set a breakpoint on the line that calls[selfconfigureView];by clicking on the line number.3. Press ⌘7 to activate the BreakpointNavigator. Observe your breakpoint in the navigator.4. Drag your breakpoint out of the navigator to remove it.5. Press ⌘1 to activate the Project Navigator.6. Click on MasterViewController. m to open it in the Editor.7. Delete the } at the end of the viewDidLoad method. Some errors and warnings will appear.8. Press ⌘4 to activate the Issue Navigator. Observe the issues that appear.9. Press the play button in the toolbar. After you see the "Build Failed" alert, press ⌘8 to activate the Log Navigator.10. Browse the logs.You should now have a basic understanding of the Xcode interface, especially how the Navigator and Editor areas interact. Send a message to your mentor with the questions you have.


p11 is superfluous.

p12
# Command Line

Command Line allows devs to navigate filesystem, modify files, execute programs, install software, create new apps, and more. Command line, command line prompt, terminal, and shell are used interchangeably. 

There are many flavors of unix shells.
The command line is often the only or most efficient way to access systems, install software, and execute programs and tests.

Guide to opening the command line. Got some options for different OSs. OSX has a terminal application, Windows has Git BASH. Linux has Ubuntu's Starting a Terminal section.
https://help.ubuntu.com/community/UsingTheTerminal

13
first git command- ls, which tells you what's in the folder you're looking at.
```bash
$ls
```
(had to review markdown on p18 for that formatting.
also a video demonstration on that page.

next git command- open ., opens 'this,' the period, the cyrrent directory. Sometimes completes in finder.
```bash
$open .
```

Now it's got a pwd command to print the open directory.
```bash
$pwd
```

Next is cd .., which brings you up one level.
```bash
$cd ..
```

You can use cd to change into a directory spotted with ls as well, just type the first unique portion of the name. So you could put CD XC and then tab if you don't have any other folders in the current directory that use capital X capital C but XCodeProjects.

```bash
$ cd Xc
```

```bash

